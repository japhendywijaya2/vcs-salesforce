public with sharing class DonationsTriggerHandler {
    public static List<String> taxIdTypeIndividual = new List<String>{'NRIC', 'FIN'};
    public static List<String> taxIdTypeOrganisation = new List<String>{'UEN', 'UEN-Business', 'UEN-Local Company', 'UEN-Others'};
    public static Boolean firstcall=false;

    
    public static void createDonationBulkified(Donations__c[] newRecordListRaw){
        try {
            // Remove record of donation with is_RD_Generated__c == true, main reason is because Donation generated by RD will not fill the entered information
            // which may cause for NPE
            // actually, don't really need to implement this validation, because the bulk algorithm has effectively exempt null entered field
            // but the validation is still implemented for reason of proccessor eficiency
            // so that this function will not run for Donation generated by RD

            List<Donations__c> newRecordList = new List<Donations__c>();

            for(Donations__c dItem : newRecordListRaw){
                if(dItem.is_RD_Generated__c == false){
                    newRecordList.add(dItem);
                }
            }

            if(newRecordList.size() > 0){
                // Query for existing contact by email for id no
                Set<String> emailToSearch = new Set<String>();
                Set<String> idIndividualToSearch = new Set<String>();
                Set<String> idOrganisationToSearch = new Set<String>();

                for(Donations__c dItem : newRecordList){
                    if(dItem.Email_Entered__c != null){
                        emailToSearch.add(dItem.Email_Entered__c);
                    }

                    if(taxIdTypeIndividual.contains(dItem.ID_Type_Entered__c) && dItem.Tax_Recipient_ID_No_Entered__c != null){
                        idIndividualToSearch.add(dItem.Tax_Recipient_ID_No_Entered__c);
                    }

                    if(taxIdTypeOrganisation.contains(dItem.ID_Type_Entered__c) && dItem.Tax_Recipient_ID_No_Entered__c != null){
                        idOrganisationToSearch.add(dItem.Tax_Recipient_ID_No_Entered__c);
                    }
                }

                Map<String, Contact> emailMap = new Map<String, Contact>();
                Map<String, Contact> idIndividualMap = new Map<String, Contact>();
                
                for(Contact cItem : [
                    SELECT Id, lastName, Email, ID_No__c
                    FROM Contact
                    WHERE Email IN :emailToSearch 
                        OR ID_No__c IN :idIndividualToSearch
                ]){
                    if(cItem.Email != null){
                        emailMap.put(cItem.email, cItem);
                    }
                    if(cItem.ID_No__c != null){
                        idIndividualMap.put(cItem.ID_No__c, cItem);
                    }
                }


                Map<String, Id> idOrganisationMap = new Map<String, Id>();
                for(Account aItem : [
                    SELECT Id, ID_No__c
                    FROM Account
                    WHERE ID_No__c IN :idOrganisationToSearch
                ]){
                    idOrganisationMap.put(aItem.ID_No__c, aItem.Id);
                }



                // =================================================================================================================
                // Bind donation record with existing contact
                List<Donations__c> contactNotExist = new List<Donations__c>();
                List<Donations__c> taxRecipientToUpdate = new List<Donations__c>();
                List<Donations__c> taxRecipientIndvNotExist = new List<Donations__c>();
                List<Donations__c> orgContactNeedToCreate = new List<Donations__c>();

                for(Donations__c dItem : newRecordList){
                    if(dItem.Email_Entered__c != null){
                        if(emailMap.get(dItem.Email_Entered__c)?.id != null){
                            dItem.Donor_Name__c = emailMap.get(dItem.Email_Entered__c).id;
                        }
                        else if( // this is to update existing Tax Recipient with Donor Email
                            taxIdTypeIndividual.contains(dItem.ID_Type_Entered__c) && dItem.Tax_Recipient_ID_No_Entered__c != null
                            && idIndividualMap.get(dItem.Tax_Recipient_ID_No_Entered__c)?.lastName == dItem.Full_Name_Entered__c){
                                taxRecipientToUpdate.add(dItem);
                        }
                        else{
                            contactNotExist.add(dItem);
                        }
                    }

                    if(taxIdTypeIndividual.contains(dItem.ID_Type_Entered__c) && dItem.Tax_Recipient_ID_No_Entered__c != null ){
                        if(idIndividualMap.get(dItem.Tax_Recipient_ID_No_Entered__c)?.id != null){
                            dItem.Tax_Recipient_Individual__c = idIndividualMap.get(dItem.Tax_Recipient_ID_No_Entered__c).id;
                        }
                        else{
                            taxRecipientIndvNotExist.add(dItem);
                        }
                    }

                    if(taxIdTypeOrganisation.contains(dItem.ID_Type_Entered__c) && dItem.Tax_Recipient_ID_No_Entered__c != null ){
                        if(idOrganisationMap.get(dItem.Tax_Recipient_ID_No_Entered__c) != null){
                            dItem.Tax_Recipient_Organisation__c = idOrganisationMap.get(dItem.Tax_Recipient_ID_No_Entered__c);
                        }
                        else{
                            orgContactNeedToCreate.add(dItem);
                        }
                    }

                }



                // =================================================================================================================
                // Handle each different list
                // intentionally developed in less efficient algorithm, for easier code readability and future scalability and maintenance
                
                // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                // Handle contactNotExist
                if(contactNotExist.size() > 0){
                    // handle for case when there are duplicate new email within the same bulk imported data set, but the same email has different last name
                    // for example maybe a mother and a child using the same new email, but they entered the donation lastname with their own name
                    // filter contact not exist with unique email

                    Map<String, Donations__c> emailUnique_donation_toCreate_map = new Map<String, Donations__c>();
                    for(Donations__c dItem : contactNotExist){
                        emailUnique_donation_toCreate_map.put(dItem.Email_Entered__c, dItem);
                    }
                    // ------------- end of feature code ------------------------------------------------


                    List<Contact> contactToCreate = new List<Contact>();

                    for(Donations__c dItem : emailUnique_donation_toCreate_map.values()){
                        Boolean taxIsDonor = dItem.Tax_Recipient_Full_Name_Entered__c == dItem.Full_Name_Entered__c;
                        
                        if(taxIdTypeIndividual.contains(dItem.ID_Type_Entered__c) && dItem.Tax_Recipient_ID_No_Entered__c != null
                            && idIndividualMap.get(dItem.Tax_Recipient_ID_No_Entered__c) != null
                            && idIndividualMap.get(dItem.Tax_Recipient_ID_No_Entered__c).lastName != dItem.Full_Name_Entered__c){
                                taxIsDonor = false;
                        }
                        
                        switch on dItem.Donor_Type__c {
                            when 'Individual' {
                                contactToCreate.add(new Contact(
                                    RecordTypeId = Schema.SObjectType.Contact.getRecordTypeInfosByName().get('Individual').getRecordTypeId(),
                                    Donor_Type__c = 'Individual',
                                    LastName = dItem.Full_Name_Entered__c,
                                    Email = dItem.Email_Entered__c,
                                    MailingStreet = dItem.Address_Entered__c,
                                    MailingPostalCode = dItem.Address_Postal_Code_Entered__c,
                                    Mailing_Address_Unit__c = dItem.Address_Unit_Entered__c,
                                    ID_Type__c = taxIsDonor ? dItem.ID_Type_Entered__c : null,
                                    ID_No__c = taxIsDonor ? dItem.Tax_Recipient_ID_No_Entered__c : null,
                                    Tax_Recipient_Full_Name__c = taxIsDonor ? dItem.Tax_Recipient_Full_Name_Entered__c : null,
                                    Donor__c = true
                                ));
                            }

                            when 'Organisation' {
                                contactToCreate.add(new Contact(
                                    RecordTypeId = Schema.SObjectType.Contact.getRecordTypeInfosByName().get('Contact').getRecordTypeId(),
                                    Donor_Type__c = 'Organisation',
                                    LastName = dItem.Full_Name_Entered__c,
                                    Email = dItem.Email_Entered__c,
                                    MailingStreet = dItem.Address_Entered__c,
                                    MailingPostalCode = dItem.Address_Postal_Code_Entered__c,
                                    Organisation_Name__c = dItem.Organisation_Name_Entered__c,
                                    Tax_Recipient_Id_Type_Org__c = taxIdTypeOrganisation.contains(dItem.ID_Type_Entered__c) ? dItem.ID_Type_Entered__c : null,
                                    Tax_Recipient_ID_No_Org__c = taxIdTypeOrganisation.contains(dItem.ID_Type_Entered__c) ? dItem.Tax_Recipient_ID_No_Entered__c : null,
                                    Donor__c = true
                                ));
                            }
                            
                            when 'Anonymous' {
                                contactToCreate.add(new Contact(
                                    RecordTypeId = Schema.SObjectType.Contact.getRecordTypeInfosByName().get('Individual').getRecordTypeId(),
                                    Donor_Type__c = 'Anonymous',
                                    LastName = 'Anon',
                                    Email = dItem.Email_Entered__c,
                                    Donor__c = true
                                ));
                            }
                        }

                        
                    }

                    Database.SaveResult[] saveResult = Database.insert(contactToCreate, false);
                    CustomException.exceptionHandling(saveResult);

                    for(Contact cItem : contactToCreate){
                        emailMap.put(cItem.Email, cItem);

                        if(cItem.ID_No__c != null){
                            idIndividualMap.put(cItem.ID_No__c, cItem);
                        }
                    }

                    // Tag contactNotExist records to the just created Contact
                    for(Donations__c dItem : contactNotExist){
                        dItem.Donor_Name__c = emailMap.get(dItem.Email_Entered__c).id;
                    }


                }
                


                // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                // Handle taxRecipientToUpdate
                if(taxRecipientToUpdate.size() > 0){
                    List<Contact> taxRecipientContactToUpdate = new List<Contact>();

                    for(Donations__c dItem : taxRecipientToUpdate){
                        taxRecipientContactToUpdate.add(new Contact(
                            Id = idIndividualMap.get(dItem.Tax_Recipient_ID_No_Entered__c).id,
                            Email = dItem.Email_Entered__c
                        ));
                    }

                    Database.SaveResult[] saveResult = Database.update(taxRecipientContactToUpdate, false);
                    CustomException.exceptionHandling(saveResult);

                    for(Contact cItem : taxRecipientContactToUpdate){
                        emailMap.put(cItem.Email, cItem);
                    }

                    for(Donations__c dItem : taxRecipientToUpdate){
                        dItem.Donor_Name__c = emailMap.get(dItem.Email_Entered__c).id;
                    }

                }

                

                // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                // Handle taxRecipientIndvNotExist
                if(taxRecipientIndvNotExist.size() > 0){
                    // further update or filter the donation record list in taxRecipientIndvNotExist to the newly created Contacts
                    List<Donations__C> filteredTaxRecipientIndvNotExist = new List<Donations__c>();

                    for(Donations__c dItem : taxRecipientIndvNotExist){
                        if(idIndividualMap.get(dItem.Tax_Recipient_ID_No_Entered__c)?.id != null){
                            dItem.Tax_Recipient_Individual__c = idIndividualMap.get(dItem.Tax_Recipient_ID_No_Entered__c).id;
                        }
                        else{
                            filteredTaxRecipientIndvNotExist.add(dItem);
                        }
                    }


                    
                    // update existing contact if tax recipient full name is equal to donor full name
                    // create contact as isTaxRecipient if tax recipient full name is different
                    if(filteredTaxRecipientIndvNotExist.size() > 0){
                        
                        Set<String> emailToSearch2 = new Set<String>();
                        for(Donations__c dItem : filteredTaxRecipientIndvNotExist){
                            emailToSearch2.add(dItem.Email_Entered__c);
                        }

                        Map<String, Contact> contactToCompareMap = new Map<String, Contact>();
                        for(Contact cItem : [
                            SELECT Id, lastName, Email, Id_No__c
                            FROM Contact
                            WHERE Email IN :emailToSearch2
                        ]){
                            contactToCompareMap.put(cItem.Email, cItem);
                        }

                        
                        List<Contact> contactToUpdate = new List<Contact>(); // this is to update existing Donor with Tax Information
                        List<Contact> isTaxRecipientToCreate = new List<Contact>();

                        for(Donations__c dItem : filteredTaxRecipientIndvNotExist){
                            if(contactToCompareMap.get(dItem.Email_Entered__c)?.lastName == dItem.Tax_Recipient_Full_Name_Entered__c
                                && contactToCompareMap.get(dItem.Email_Entered__c)?.Id_No__c == null){

                                    contactToUpdate.add(new Contact(
                                        Id = contactToCompareMap.get(dItem.Email_Entered__c).id,
                                        ID_Type__c = dItem.ID_Type_Entered__c,
                                        ID_No__c = dItem.Tax_Recipient_ID_No_Entered__c,
                                        Tax_Recipient_Full_Name__c = dItem.Tax_Recipient_Full_Name_Entered__c,
                                        Donor__c = true
                                    ));
                            }

                            else{
                                
                                isTaxRecipientToCreate.add(new Contact(
                                    isTaxRecipient__c = true,
                                    RecordTypeId = Schema.SObjectType.Contact.getRecordTypeInfosByName().get(dItem.Donor_Type__c == 'Organisation' ? 'Contact' : 'Individual').getRecordTypeId(),
                                    Donor_Type__c = dItem.Donor_Type__c == 'Organisation' ? 'Organisation' : 'Individual',
                                    Organisation_Name__c = dItem.Donor_Type__c == 'Organisation' ? dItem.Organisation_Name_Entered__c : null,
                                    LastName = dItem.Tax_Recipient_Full_Name_Entered__c,
                                    ID_Type__c = dItem.ID_Type_Entered__c,
                                    ID_No__c = dItem.Tax_Recipient_ID_No_Entered__c,
                                    Tax_Recipient_Full_Name__c = dItem.Tax_Recipient_Full_Name_Entered__c,
                                    Donor__c = true
                                ));
                            }
                        }

                        if(contactToUpdate.size() > 0){
                            Database.SaveResult[] saveResult = Database.update(contactToUpdate, false);
                            CustomException.exceptionHandling(saveResult);

                            for(Contact cItem : contactToUpdate){
                                idIndividualMap.put(cItem.Id_No__c, cItem);
                            }
                        }

                        if(isTaxRecipientToCreate.size() > 0){
                            Database.SaveResult[] saveResult = Database.insert(isTaxRecipientToCreate, false);
                            CustomException.exceptionHandling(saveResult);

                            for(Contact cItem : isTaxRecipientToCreate){
                                idIndividualMap.put(cItem.Id_No__c, cItem);
                            }
                        }



                        // tagged filteredTaxRecipientIndvNotExist to the just created / updated contact
                        for(Donations__c dItem : filteredTaxRecipientIndvNotExist){
                            dItem.Tax_Recipient_Individual__c = idIndividualMap.get(dItem.Tax_Recipient_ID_No_Entered__c).id;
                        }

                    }

                }


                // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                // Handle orgContactNeedToCreate
                // We have inserted new Donor which now may have also created the Organisation Account, so now we will query them again to retrieved their updated information about id no
                // Unless, the donation record is using a donor that's already exist but referencing to another UEN Id no which has not existed (unlikely to happen but possible)
                // in this case, new contact would not be created so the new Account would not be created as well
                // so in this case we will create an organisation Account only, with no contact
                if(orgContactNeedToCreate.size() > 0){
                    Set<String> idOrganisationToSearch2 = new Set<String>();
                    for(Donations__c dItem : orgContactNeedToCreate){
                        idOrganisationToSearch2.add(dItem.Tax_Recipient_ID_No_Entered__c);
                    }

                    for(Account aItem : [
                        SELECT Id, ID_No__c
                        FROM Account
                        WHERE ID_No__c IN :idOrganisationToSearch2
                    ]){
                        idOrganisationMap.put(aItem.ID_No__c, aItem.Id);
                    }

                    List<Account> plainAccountToCreate = new List<Account>();
                    for(Donations__c dItem : orgContactNeedToCreate){
                        if(idOrganisationMap.get(dItem.Tax_Recipient_ID_No_Entered__c) == null){
                            plainAccountToCreate.add(new Account(
                                RecordTypeId = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Organisation').getRecordTypeId(),
                                Name = dItem.Organisation_Name_Entered__c,
                                ID_Type__c = dItem.ID_Type_Entered__c,
                                ID_No__c = dItem.Tax_Recipient_ID_No_Entered__c
                            ));
                        }
                        
                    }

                    if(plainAccountToCreate.size() > 0){
                        Database.SaveResult[] saveResult = Database.insert(plainAccountToCreate, false);
                        CustomException.exceptionHandling(saveResult);

                        for(Account aItem : plainAccountToCreate){
                            idOrganisationMap.put(aItem.ID_No__c, aItem.Id);
                        }
                    }


                    for(Donations__c dItem : orgContactNeedToCreate){
                        dItem.Tax_Recipient_Organisation__c = idOrganisationMap.get(dItem.Tax_Recipient_ID_No_Entered__c);
                    }
                }

            }
        } catch (Exception err) {
            CustomException.printErrorInfo('DonationTriggerHandler.createDonationBulkified', err);
            Trigger.new[0].addError(err.getMessage());
        }

    }


    public static void createDonationSingle(Donations__c newRecord){

        if(newRecord.is_RD_Generated__c == false){
            // Need to validate is_RD_Generated__c == false, because donation generated by RD doesn't fill any of the entered information
            // which may cause for NPE
            if(newRecord.Email_Entered__c != null){
                // 1. check for existing Contact for Donor Email and Tax Recipient
                // check for existing Account if Tax Recipient Id Type if of Organisation Type
                String contactExistQS = 'SELECT Id, AccountId, Email, lastName, Id_Type__c, Id_No__c FROM Contact '
                                    + 'WHERE Email = \'' +  newRecord.Email_Entered__c + '\'';

                if(taxIdTypeIndividual.contains(newRecord.ID_Type_Entered__c) && newRecord.Tax_Recipient_ID_No_Entered__c != null){
                    contactExistQS += ' OR (ID_Type__c = \'' 
                                    + newRecord.ID_Type_Entered__c 
                                    + '\' AND ID_No__c = \'' 
                                    + newRecord.Tax_Recipient_ID_No_Entered__c 
                                    + '\')';
                }
                
                List<Contact> contactExistList = Database.query(contactExistQS);
                Contact contactEmailExist;
                Contact individualTaxRecipientExist;
                Account organisationExist;

                if(contactExistList.size() > 0){
                    for(Contact cItem : contactExistList){
                        if( String.isNotBlank(cItem.Email) && cItem.email == newRecord.Email_Entered__c ){
                            contactEmailExist = citem;
                        }

                        if( String.isNotBlank(cItem.Id_Type__c) && String.isNotBlank(cItem.Id_No__c)
                            && cItem.Id_Type__c == newRecord.ID_Type_Entered__c && cItem.Id_No__c == newRecord.Tax_Recipient_ID_No_Entered__c){
                            individualTaxRecipientExist = cItem;
                        }
                    }

                }

                // 2. if the donation is using Tax Recipient of Organisation, then retrieve or create the organisation Account
                if( taxIdTypeOrganisation.contains(newRecord.ID_Type_Entered__c) ){
                    List<Account> organisationExistList = new List<Account>([
                        SELECT Id
                        FROM Account
                        WHERE ID_Type__c = :newRecord.ID_Type_Entered__c
                            AND ID_No__c = :newRecord.Tax_Recipient_ID_No_Entered__c
                    ]);

                    if(organisationExistList.size() > 0){
                        organisationExist = organisationExistList[0];
                    }
                    else{
                        organisationExist = new Account(
                            RecordTypeId = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Organisation').getRecordTypeId(),
                            Name = newRecord.Organisation_Name_Entered__c,
                            ID_Type__c = newRecord.ID_Type_Entered__c,
                            ID_No__c = newRecord.Tax_Recipient_ID_No_Entered__c
                        );

                        Database.insert(organisationExist);
                    }
                }
                

                // 3. update or create Contact Record 
                // below is the handler for all possibles scenarios
                if(contactEmailExist == null && individualTaxRecipientExist != null 
                    && individualTaxRecipientExist.Email == null  ){

                    if(newRecord.Full_Name_Entered__c == individualTaxRecipientExist.lastName){
                        System.debug('\n\nif #1a \n'); // case #9
                        
                        // update individualTaxRecipientExist with the entered email
                        individualTaxRecipientExist.Email = newRecord.Email_Entered__c;
                        
                        Database.update(individualTaxRecipientExist);
                        contactEmailExist = individualTaxRecipientExist;

                    }
                    else if(newRecord.Full_Name_Entered__c != individualTaxRecipientExist.lastName){
                        System.Debug('\n\nif #1b \n'); // case #10

                        Map<String, Contact> createDonorResult = createDonorAndTaxRecipient(newRecord, true);
                        contactEmailExist = createDonorResult.get('contactEmailExist');
                    }
                    
                }


                else if(contactEmailExist == null && individualTaxRecipientExist != null && individualTaxRecipientExist.Email != null ){
                    System.debug('\n\nif #2 \n'); // Case #8
                    
                    // contactEmailExist == null means the entered email is different with individualTaxRecipientExist
                    // CREATE new Contact
                    Map<String, Contact> createDonorResult = createDonorAndTaxRecipient(newRecord, true);
                    contactEmailExist = createDonorResult.get('contactEmailExist');
                }


                else if(contactEmailExist != null && individualTaxRecipientExist == null
                        && taxIdTypeIndividual.contains(newRecord.ID_Type_Entered__c) && String.isNotBlank(newRecord.Tax_Recipient_ID_No_Entered__c)){

                    if(contactEmailExist.ID_Type__c == null && contactEmailExist.ID_No__c == null 
                        && contactEmailExist.LastName == newRecord.Tax_Recipient_Full_Name_Entered__c){
                        System.debug('\n\nif #3a \n');
                        // update contactEmailExist with the entered tax information
                        contactEmailExist.Id_Type__c = newRecord.ID_Type_Entered__c;
                        contactEmailExist.Id_No__c = newRecord.Tax_Recipient_ID_No_Entered__c;
                        contactEmailExist.Tax_Recipient_Full_Name__c = newRecord.Tax_Recipient_Full_Name_Entered__c;
                        
                        Database.update(contactEmailExist);
                        individualTaxRecipientExist = contactEmailExist;

                    }
                    else if( (contactEmailExist.ID_Type__c != null && contactEmailExist.ID_No__c != null ) 
                        || contactEmailExist.LastName != newRecord.Tax_Recipient_Full_Name_Entered__c){
                        System.debug('\n\nif #3b \n');
                        // the logic first condition would cause system to reach here, one condition that might cause it 
                        // is that donation payload contain a tax information that doesn't exist yet in the system
                        // and because of that, contactEmailExist can't be having the tax information
                        // create new contact for Tax Recipient
                        individualTaxRecipientExist = new Contact(
                            RecordTypeId = Schema.SObjectType.Contact.getRecordTypeInfosByName().get(newRecord.Donor_Type__c == 'Organisation' ? 'Contact' : 'Individual').getRecordTypeId(),
                            Donor_Type__c = newRecord.Donor_Type__c,
                            Organisation_Name__c = newRecord.Organisation_Name_Entered__c,
                            LastName = newRecord.Tax_Recipient_Full_Name_Entered__c,
                            Id_Type__c = newRecord.ID_Type_Entered__c,
                            Id_No__c = newRecord.Tax_Recipient_ID_No_Entered__c,
                            Tax_Recipient_Full_Name__c = newRecord.Tax_Recipient_Full_Name_Entered__c,
                            isTaxRecipient__c = true
                        );
                        
                        Database.insert(individualTaxRecipientExist);
                    }
                    
                }
            
                
                else if(contactEmailExist == null && individualTaxRecipientExist == null){
                    System.debug('\n\nif #4 \n');
                    // if both contactEmailExist && individualTaxRecipientExist == null, 
                    // then create Contact for the donor, 
                    // and Tax Recipient (individual or organisation) if the information is provided
                    Map<String, Contact> createDonorResult = createDonorAndTaxRecipient(newRecord, false);

                    contactEmailExist = createDonorResult.get('contactEmailExist');
                    individualTaxRecipientExist = createDonorResult.get('individualTaxRecipientExist');
                }



                // 4. tagging the donor and tax recipient into donation record
                contactEmailExist = new List<Contact>([
                    SELECT Id, AccountId
                    FROM Contact
                    WHERE Id = :contactEmailExist.id
                ])[0];
                newRecord.Donor_Name__c = contactEmailExist.Id;
                newRecord.Donor_Account__c = contactEmailExist.AccountId;

                
                
                if(taxIdTypeIndividual.contains(newRecord.ID_Type_Entered__c)){
                    newRecord.Tax_Recipient_Individual__c = individualTaxRecipientExist.id;
                }
                else if(taxIdTypeOrganisation.contains(newRecord.ID_Type_Entered__c)){
                    newRecord.Tax_Recipient_Organisation__c = organisationExist.id;
                }

            }
            else if(newRecord.Email_Entered__c == null ){
                if(newRecord.Donor_Name__c != null){
                    newRecord.Donor_Account__c = [
                        SELECT Id, AccountId
                        FROM Contact
                        WHERE id = :newRecord.Donor_Name__c
                    ].AccountId;
                }
                else{
                    newRecord.addError('Donor_Name__c', 'Please fill in Donor Name if "Email (Entered)" field is empty');
                }
            }
            

        }

    }


    public static Map<String, Contact> createDonorAndTaxRecipient(Donations__c newRecord, Boolean taxRecipientContactExist){
        List<Contact> contactToCreate = new list<Contact>();

        Contact contactEmailExist = new Contact(
            lastName = newRecord.Full_Name_Entered__c,
            Email = newRecord.Email_Entered__c,
            MailingStreet = newRecord.Address_Entered__c,
            MailingPostalCode = newRecord.Address_Postal_Code_Entered__c,
            Mailing_Address_Unit__c = newRecord.Address_Unit_Entered__c
        );

        Contact individualTaxRecipientExist;

        switch on newRecord.Donor_Type__c {
            when 'Organisation' {
                contactEmailExist.RecordTypeId = Schema.SObjectType.Contact.getRecordTypeInfosByName().get('Contact').getRecordTypeId();
                contactEmailExist.Donor_Type__c = 'Organisation';
                contactEmailExist.Organisation_Name__c = newRecord.Organisation_Name_Entered__c;

                if( taxIdTypeOrganisation.contains(newRecord.ID_Type_Entered__c) ){
                    contactEmailExist.Tax_Recipient_Id_Type_Org__c = newRecord.ID_Type_Entered__c;
                    contactEmailExist.Tax_Recipient_Id_No_Org__c = newRecord.Tax_Recipient_ID_No_Entered__c;
                }
                
            }

            when 'Individual' {
                contactEmailExist.RecordTypeId = Schema.SObjectType.Contact.getRecordTypeInfosByName().get('Individual').getRecordTypeId();
                contactEmailExist.Donor_Type__c = 'Individual';
            }
            
            when 'Anonymous' {
                contactEmailExist.RecordTypeId = Schema.SObjectType.Contact.getRecordTypeInfosByName().get('Individual').getRecordTypeId();
                contactEmailExist.Donor_Type__c = 'Anonymous';
            }
        }

        // create Contact for Tax Recipient Id Type individual
        if( taxRecipientContactExist == false && taxIdTypeIndividual.contains(newRecord.ID_Type_Entered__c) ){
            // if new Tax Recipient is the same with new Donor, than tag the tax info to the donor
            if(newRecord.Tax_Recipient_Full_Name_Entered__c == newRecord.Full_Name_Entered__c){
                contactEmailExist.ID_Type__c = newRecord.ID_Type_Entered__c;
                contactEmailExist.ID_No__c = newRecord.Tax_Recipient_ID_No_Entered__c;
                contactEmailExist.Tax_Recipient_Full_Name__c = newRecord.Tax_Recipient_Full_Name_Entered__c;
            }
            // if new Tax Recipient is the same with new Donor, than create a new Contact for the  tax recpient 
            else{
                individualTaxRecipientExist = new Contact(
                    RecordTypeId = Schema.SObjectType.Contact.getRecordTypeInfosByName().get(newRecord.Donor_Type__c == 'Organisation' ? 'Contact' : 'Individual').getRecordTypeId(),
                    Donor_Type__c = newRecord.Donor_Type__c,
                    Organisation_Name__c = newRecord.Organisation_Name_Entered__c,
                    lastName = newRecord.Tax_Recipient_Full_Name_Entered__c,
                    ID_Type__c = newRecord.ID_Type_Entered__c,
                    ID_No__c = newRecord.Tax_Recipient_ID_No_Entered__c,
                    Tax_Recipient_Full_Name__c = newRecord.Tax_Recipient_Full_Name_Entered__c,
                    isTaxRecipient__c = true
                );

            }
        }

        contactToCreate.add(contactEmailExist);
        if(individualTaxRecipientExist != null){
            contactToCreate.add(individualTaxRecipientExist);
        }
        Database.insert(contactToCreate);
        
        if(newRecord.Tax_Recipient_Full_Name_Entered__c == newRecord.Full_Name_Entered__c){
            individualTaxRecipientExist = contactEmailExist;
        }

        return new Map<String, Contact>{
            'contactEmailExist' => contactEmailExist,
            'individualTaxRecipientExist' => individualTaxRecipientExist
        };
    }


    public static void getAccountIdBulk(List<Donations__c> newRecordList){
        List<Id> donorContactIdList = new List<Id>();

        for(Donations__c dItem : newRecordList){
            if(dItem.Donor_Name__c != null){
                donorContactIdList.add(dItem.Donor_Name__c);
            }
        }

        Map<Id, Contact> donorContactMap = new Map<Id, Contact>([
            SELECT Id, AccountId
            FROM Contact
            WHERE Id IN :donorContactIdList
        ]);

        for(Donations__c dItem : newRecordList){
            if(dItem.Donor_Name__c != null){
                dItem.Donor_Account__c = donorContactMap.get(dItem.Donor_Name__c).AccountId;
            }
        }

    }


    public static void generateTaxReceiptNo(List<Donations__c> newList){
        try {
            for(Donations__c d : newList){
                if(d.Donation_Status__c == 'Cleared' && d.Cleared_Datetime__c == null){
                    throw new CustomException('Please complete Cleared Datetime field');
                }
            }

            List<AggregateResult> lstNoTD = [
                SELECT MAX(Tax_Receipt_Running_No__c)lastNo
                FROM Donations__c 
                WHERE Tax_Deductible__c = true 
                    AND Id NOT IN :newList 
            ];
            List<AggregateResult> lstNoNT = [
                SELECT MAX(Tax_Receipt_Running_No__c)lastNo 
                FROM Donations__c 
                WHERE Tax_Deductible__c = false 
                    AND Id NOT IN :newList 
            ];

            Decimal tdNumber = (Decimal) lstNoTD[0].get('lastNo');
            Decimal ntNumber = (Decimal) lstNoNT[0].get('lastNo');
            
            for(Donations__c d : newList){
                if(d.Donation_Status__c == 'Cleared' && d.Tax_Receipt_No__c == null && d.Cleared_Datetime__c >= Datetime.newInstance(2022, 1, 1)){ // TEMPORARY CONDITION, ONLY USE THIS TO FIX DUPLICATE TAX RECEIPT NO ISSUE; REVERT TO THE CORRECT ONE AFTER FIXING.
                // if(d.Donation_Status__c == 'Cleared' && d.Tax_Receipt_No__c == null){ // THIS IS THE CORRECT CONDITION
                    if(d.Tax_Deductible__c == true){
                        Datetime dt = d.Cleared_Datetime__c;
                        tdNumber++;
                        
                        d.Tax_Receipt_No__c = 'TD'+dt.format('YYMM')+ setNoInDigit(tdNumber, 4);
                        d.Tax_Receipt_Running_No__c = tdNumber;
                        //runingNoTD ++;
                    }else{
                        Datetime dt = d.Cleared_Datetime__c;
                        ntNumber++;

                        d.Tax_Receipt_No__c = 'NT'+dt.format('YYMM')+ setNoInDigit(ntNumber, 4);
                        d.Tax_Receipt_Running_No__c = ntNumber;
                    }
                }
            }
            
        } catch (Exception err) {
            CustomException.printErrorInfo('DonationTriggerHandler.generateTaxReceiptNo', err);
            Trigger.new[0].addError(err.getMessage());
        }
        
    }


// -================================= start mark for deletion  ========================================================
// this is v1, this code will cause the system to restart tax number to 1 every month
    // public static void generateTaxReceiptNo(List<Donations__c> newList){
    //     try {
    //         Set<String> clearedDateTD = new Set<String>();
    //         Set<String> clearedDateNT = new Set<String>();
    //         for(Donations__c d : newList){
    //             if(d.Donation_Status__c == 'Cleared' && d.Cleared_Datetime__c == null){
    //                 d.Cleared_Datetime__c.addError('Please complete this field');
    //             }
    //             else if(d.Donation_Status__c == 'Cleared' && d.Tax_Receipt_Running_No__c == null){ // bug, this will cause the receipt to be 1 when record is updated manually but tax receipt running is not reset
    //                 if(d.Tax_Deductible__c == true){
    //                     clearedDateTD.add(d.Cleared_Datetime__c.format('YM'));
    //                 }else{
    //                     clearedDateNT.add(d.Cleared_Datetime__c.format('YM'));
    //                 }
    //             }
    //         }
    //         List<AggregateResult> lstNoTD = [SELECT MAX(Tax_Receipt_Running_No__c)lastNo, yearmonth__c FROM Donations__c WHERE yearmonth__c IN :clearedDateTD AND Tax_Deductible__c = true AND Id NOT IN :newList GROUP BY yearmonth__c];
    //         List<AggregateResult> lstNoNT = [SELECT MAX(Tax_Receipt_Running_No__c)lastNo, yearmonth__c FROM Donations__c WHERE yearmonth__c IN :clearedDateNT AND Tax_Deductible__c = false AND Id NOT IN :newList GROUP BY yearmonth__c];
            
    //         Map<String, Decimal> lstNoTDMap = new Map<String, Decimal>();
    //         Map<String, Decimal> lstNoNTMap = new Map<String, Decimal>();
            
    //         for(AggregateResult aggr : lstNoTD){
    //             lstNoTDMap.put((String)aggr.get('yearmonth__c'), (Decimal)aggr.get('lastNo'));
    //         }
    //         for(AggregateResult aggr : lstNoNT){
    //             lstNoNTMap.put((String)aggr.get('yearmonth__c'), (Decimal)aggr.get('lastNo'));
    //         }
    //         //Decimal runingNoNT = 1;
    //         //Decimal runingNoTD = 1;
    //         for(Donations__c d : newList){
    //             if(d.Donation_Status__c == 'Cleared' && d.Tax_Receipt_No__c == null){
    //                 if(d.Tax_Deductible__c == true){
    //                     Datetime dt = d.Cleared_Datetime__c;
    //                     if(lstNoTDMap.get(dt.format('YM')) == null){ lstNoTDMap.put(dt.format('YM'), 1);} // bug, this will cause the receipt to be 1 when record is updated manually but tax receipt running is not reset
    //                     else{lstNoTDMap.put(dt.format('YM'), lstNoTDMap.get(dt.format('YM')) + 1);}
                        
    //                     d.Tax_Receipt_No__c = 'TD'+dt.format('YYMM')+ setNoInDigit(lstNoTDMap.get(dt.format('YM')), 4);
    //                     d.Tax_Receipt_Running_No__c = lstNoTDMap.get(dt.format('YM'));
    //                     //runingNoTD ++;
    //                 }else{
    //                     Datetime dt = d.Cleared_Datetime__c;
    //                     if(lstNoNTMap.get(dt.format('YM')) == null){ lstNoNTMap.put(dt.format('YM'), 1);}
    //                     else{lstNoNTMap.put(dt.format('YM'), lstNoNTMap.get(dt.format('YM')) + 1);}
    //                     d.Tax_Receipt_No__c = 'NT'+dt.format('YYMM')+ setNoInDigit(lstNoNTMap.get(dt.format('YM')), 4);
    //                     d.Tax_Receipt_Running_No__c = lstNoNTMap.get(dt.format('YM'));
    //                 }
    //             }
    //         }
            
    //     } catch (Exception err) {
    //         CustomException.printErrorInfo('DonationTriggerHandler.generateTaxReceiptNo', err);
    //         Trigger.new[0].addError(err.getMessage());
    //     }
        
    // }

// -================================= end mark for deletion  ========================================================

    public static String setNoInDigit(Decimal i, integer digitNo){
        String s = ''+i;
        while(s.length() < digitNo){
            s = '0'+s; 
        }
        return s;
    }


    public static void discrepancyCheck(Donations__c[] newRecordList){
        Set<id> contactIdSet = new Set<id>();

        for(Donations__c dItem : newRecordList){
            contactIdSet.add(dItem.Donor_Name__c);
            // if(dItem.Tax_Recipient_Individual__c != null){
            //     contactIdSet.add(dItem.Tax_Recipient_Individual__c);
            // }
        }

        Map<Id, Contact> contactOrganisationMap = new Map<Id, Contact>([
            SELECT Id, lastName, Account.ID_Type__c, Account.ID_No__c , Account.Tax_Recipient_Full_Name__c
            FROM Contact
            WHERE Id = :contactIdSet
        ]);


        for(Donations__c dItem : newRecordList){
            if( dItem.Donor_Type__c != 'Anonymous' 
                && ( String.isNotBlank(dItem.Full_Name_Entered__c) && dItem.Full_Name_Entered__c != contactOrganisationMap.get(dItem.Donor_Name__c)?.lastName )
            ){
                dItem.Discrepancy__c = true;
            }else{            
                dItem.Discrepancy__c = false;
            }
        }

    }


    public static void updateContactDonationInfo(Donations__c[] newRecordList){
        // 1. compile list of contact to update
        Map<Id, Date> contactToUpdate = new Map<Id, Date>();
        for(Donations__c donItem : newRecordList){
            contactToUpdate.put(donItem.Donor_Name__c, donItem.Donation_Date__c);
        }
        

        // 2. query the contact list
        Map<Id, Contact> contactListToUpdate = new Map<Id, Contact>([
            SELECT Id, 	Total_Donation_Amount__c, Last_Donation_Date__c, Number_of_Donations__c, Donation_Frequency__c, DonorActivity__c
            FROM Contact
            WHERE Id in :contactToUpdate.keySet()
        ]);


        // 3. aggregtge the summary of donation of contact in ContactIdToUpdate
        AggregateResult[] aggregateCounter = [
            SELECT SUM(Donation_Amount__C) TotalDonation, Count(Id) DonationCount, Donor_Name__c
            FROM Donations__c
            WHERE Donor_Name__c in :contactToUpdate.keyset()
                AND Donation_Status__c in ('Cleared')
            GROUP By Donor_Name__c
        ];


        // 4. Compile donation frequency
        Map<Id, String> contactDonationFrequency = compileContactDonationFrequency(contactToUpdate.keySet());


        // 5. compile the contact Donor Details
        if(aggregateCounter != null || aggregateCounter.size() > 0){
            for(AggregateResult item : aggregateCounter){
                contactListToUpdate.get((String) item.get('Donor_Name__c') ).Total_Donation_Amount__c = (Decimal) item.get('TotalDonation');
                contactListToUpdate.get((String) item.get('Donor_Name__c') ).Number_of_Donations__c = (Decimal) item.get('DonationCount');
                contactListToUpdate.get((String) item.get('Donor_Name__c') ).Last_Donation_Date__c = contactToUpdate.get((Id) item.get('Donor_Name__c'));
                contactListToUpdate.get((String) item.get('Donor_Name__c') ).Donation_Frequency__c = contactDonationFrequency.get((Id) item.get('Donor_Name__c'));
                contactListToUpdate.get((String) item.get('Donor_Name__c') ).Donor__c = true;
                contactListToUpdate.get((String) item.get('Donor_Name__c') ).DonorActivity__c = 'Active';
            }

        }
        Database.update(contactListToUpdate.values(), false);
    }


    public static Map<Id, String> compileContactDonationFrequency(Set<Id> contactIdList){
        Map<Id, Set<String>> contactFrequency = new Map<Id, Set<String>>();
        
        Donations__c[] donationList = [
            SELECT Donor_Name__c, Frequency_Type__c
            FROM Donations__c
            WHERE Donor_Name__c IN :contactIdList
                AND Donation_Status__c = 'Cleared'
        ];

        // compile contactFrequency combination
        for(Donations__c donItem : donationList){
            if(contactFrequency.containsKey(donItem.Donor_Name__c)){
                contactFrequency.get(donItem.Donor_Name__c).add(donItem.Frequency_Type__c);
            }
            else{
                contactFrequency.put(donItem.Donor_Name__c, new Set<String>{donItem.Frequency_Type__c});
            }
        }

        // compile contactDonation
        Map<Id, String> contactDonationFrequency = new Map<Id, String>();
        for( Id contactId : contactFrequency.keySet() ){
            String donationFrequency;

            if( contactFrequency.get(contactId).containsAll(new Set<String>{'One-time', 'Recurring'}) ){
                donationFrequency = 'Both';
            }
            else if( contactFrequency.get(contactId).contains('One-time')){
                donationFrequency = 'One-time';
            }
            else if( contactFrequency.get(contactId).contains('Recurring')){
                donationFrequency = 'Recurring';
            }

            contactDonationFrequency.put(contactId, donationFrequency);
        }

        return contactDonationFrequency;
    }


    public static void updateAccountDonationInfo(Donations__C[] newRecordList) {
        List<Account> accountToUpdateList = new List<Account>();

        for(Donations__c dItem : newRecordList){
            if(dItem.Donor_Account__c != null && dItem.Donation_Status__c == 'Cleared'){
                Account accountToUpdate = new Account(
                    id = dItem.Donor_Account__c,
                    Donor__c = true
                );

                if(!accountToUpdateList.contains(accountToUpdate)){
                    accountToUpdateList.add(accountToUpdate);
                }
            }
        }

        Database.update(accountToUpdateList, false);
    }


    public static void updateRD (Donations__c newRecord, Donations__c oldRecord) {
        // 1. update next deduction date
        Recurring_Donation__c rdTarget = [
            SELECT Id, 	Total_Donation_to_Date__c, 	Frequency__c
            FROM Recurring_Donation__c
            WHERE Id = :newRecord.Recurring_Donation__c
        ];

        rdTarget.Next_Deduction_Date__c = RDTriggerHandler.getNextDeductionDate( Date.valueOf(newRecord.Donation_Datetime__c), rdTarget.Frequency__c, true);


        // 2. count total donation to date
        List<AggregateResult> totalDonation = [
            SELECT SUM(Donation_Amount__c) totalDonation
            FROM Donations__c
            WHERE Recurring_Donation__c = :newRecord.Recurring_Donation__c
                AND Donation_Status__c = 'Cleared'
        ];
        rdTarget.Total_Donation_to_Date__c = (Decimal) totalDonation[0].get('totalDonation');


        // 3. IF newRecord.Auth_Code__c exist, then update RD token id
        if(String.isNotBlank(newRecord.Auth_Code__c) ){
            rdTarget.Token_ID__c = newRecord.Auth_Code__c;
        }

        
        // 4. rdTarget status = approved
        rdTarget.RD_Status__c = 'Approved';
        update rdTarget;
    }


    public static void updateProgramme(Donations__c[] newRecordList, Donations__c[] oldRecordList){
        // 1. compile Programme Id to update
        Set<Id> idProgrammeSet = new Set<Id>();

        for(Donations__c don : newRecordList){
            if(don.Programme_Event__c != null){
                idProgrammeSet.add(don.Programme_Event__c);
            }
        }

        if(oldRecordList != null && oldRecordList.size() > 0){
            for(Donations__c don : oldRecordList){
                if(don.Programme_Event__c != null){
                    idProgrammeSet.add(don.Programme_Event__c);
                }
            }
        }

        // 2. aggregate counter and sum for the Programme Id Set
        AggregateResult[] groupResult = [
            SELECT COUNT(id) Count_Donation , SUM(Donation_Amount__c) Sum_Donation, Programme_Event__c
            FROM Donations__C
            WHERE Programme_Event__c IN :idProgrammeSet
                AND Donation_Status__c = 'Cleared'
            GROUP BY Programme_Event__c 
        ];


        Map<Id, Map<String, Decimal>> aggregateCounterMap = new Map<Id, Map<String, Decimal>>();
        for(AggregateResult res : groupResult){
            aggregateCounterMap.put(
                (String) res.get('Programme_Event__c'), new Map<String, Decimal>{
                    'Count_Donation' => (Decimal) res.get('Count_Donation'),
                    'Sum_Donation' => (Decimal) res.get('Sum_Donation')
                }
            );
        }


        // 3. Compile Programme record to update
        List<Programme_Events__c> programToUpdateList = new List <Programme_Events__c>();
        for(Id acItem : aggregateCounterMap.keySet()){
            programToUpdateList.add( new Programme_Events__c(
                id = acItem,
                Number_of_Donations__c = aggregateCounterMap.get(acItem).get('Count_Donation'),
                Total_Donation_Amt__c = aggregateCounterMap.get(acItem).get('Sum_Donation')
            ));
        }

        Database.update(programToUpdateList);
    }
    

    public static void sendEmailResponseSingle(Donations__c newRecord, Donations__c oldRecord){
        System.debug('\n\nfirstcall @sendEmailResponseSingle\n' + firstcall);  
        if(!firstcall){
            
            if(
                !newRecord.Electronic_Receipt_Sent__c
                && (
                    oldRecord == null
                    || oldRecord != null && oldRecord.Donation_Status__c != newRecord.Donation_Status__c
                )
            ){
                switch on newRecord.Donation_Status__c {
                    when 'Cleared' {
                        Utils.sendSingleEmailTemplate(newRecord.donor_name__c, 'Donation Thank You', newRecord.id);
                    }
                    when 'CC Declined', 'Giro Rejected', 'Cheque Returned'{
                        Utils.sendSingleEmailTemplate(newRecord.donor_name__c, 'Donation Fail', newRecord.id);
                    }
                }

             

                Donations__c updateRecord = newRecord.clone(true);
                updateRecord.Electronic_Receipt_Sent__c = true;
                firstcall = true;
                Update updateRecord;
            }

        }

    }


    public static void sendEmailResponseInBatch(Donations__c[] newRecordList, Map<Id,Donations__c> oldRecordMap){
        if(!firstcall){
            List<Donations__c> successDonationList = new List<Donations__c>();
            List<Donations__c> failDonationList = new List<Donations__c>();
            List<Donations__c> donationsToUpdate = new List<Donations__c>();
            
            for(Donations__c dItem : newRecordList){
                
                Boolean addToUpdateList = false;
                if(!dItem.Import__c
                    && !dItem.Electronic_Receipt_Sent__c
                    && ( oldRecordMap == null 
                        || (oldRecordMap != null && dItem.Donation_Status__c != oldRecordMap.get(dItem.id).Donation_Status__c) 
                    )
                ){
                    switch on dItem.Donation_Status__c {
                        when 'Cleared'{
                            successDonationList.add(dItem);
                            addToUpdateList = true;
                        }
                        when 'CC Declined', 'Giro Rejected', 'Cheque Returned'{
                            failDonationList.add(dItem);
                            addToUpdateList = true;
                        }
                    }

                    if(addToUpdateList){
                        donationsToUpdate.add(new Donations__c(
                            id = dItem.id,
                            Electronic_Receipt_Sent__c = true
                        ));
                    }
                    
                }
            }
            
            if(successDonationList.size() > 0){
                sendDonationResponseEmailBatchable emailSuccessBatch = new sendDonationResponseEmailBatchable(successDonationList, 'Donation Thank You');
                Database.executeBatch(emailSuccessBatch, 10);
            }

            if(failDonationList.size() > 0){
                sendDonationResponseEmailBatchable emailFailBatch = new sendDonationResponseEmailBatchable(failDonationList, 'Donation Fail');
                Database.executeBatch(emailFailBatch, 10);
            }

            if(donationsToUpdate.size() > 0){
                firstcall = true;
                Database.update(donationsToUpdate, false);
            }

        }
        
    }


    public static void donationStatusCleared(Donations__c[] newRecordList){
        for(Donations__c dItem : newRecordList){
            if(dItem.Cleared_Datetime__c != null){
                dItem.Donation_Status__c = 'Cleared';
            }
            
        }
    }
    
}